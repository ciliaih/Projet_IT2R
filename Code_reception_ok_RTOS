/*----------------------------------------------------------------------------
 * CMSIS-RTOS 'main' function template
 *---------------------------------------------------------------------------*/

#define osObjectsPublic                     // define objects in main module
#include "osObjects.h"                      // RTOS object definitions
#include "Driver_USART.h"               // ::CMSIS Driver:USART
#include "LPC17xx.h"
#include "Board_GLCD.h"
#include "GLCD_Config.h"
#include "stdio.h"


extern ARM_DRIVER_USART Driver_USART1;
extern GLCD_FONT GLCD_Font_16x24; 

void lidar_MOTOCLT(void);
void Init_UART(void);

void tache1(void const * argument);
void tache2(void const * argument);

osThreadId ID_tache1,ID_tache2;

void tache1(void const * argument) // envoie de la trame d'init
{
	uint8_t send[2] = {0xA5,0x20}; //séquence start a envoyer 
	uint8_t tab[10];
	uint8_t i;
	char  distance_q2[10];
	
	Init_UART(); // initialisation de l'uart
	
	while(Driver_USART1.GetStatus().tx_busy == 1); // attente buffer TX vide
	Driver_USART1.Send(send,2); // on envoie depuis Rx le contenu du tableau send
	
	while(1)
	{
		Driver_USART1.Receive(tab,10);
		while(Driver_USART1.GetRxCount()<1); // attente que 1 case soit pleine
		
		for (i=0;i<10;i++)
		{
			if (( (tab[i]&0x3E) ==0x3E) && ( (tab[i+1]&0x01) == 0x01))
			{
			sprintf(distance_q2,"%0x",tab[i]);
			GLCD_DrawString(0,0,distance_q2);
			sprintf(distance_q2,"%0x",tab[i+1]);
			GLCD_DrawString(40,0,distance_q2);
			sprintf(distance_q2,"%0x",tab[i+2]);
			GLCD_DrawString(80,0,distance_q2);
			sprintf(distance_q2,"%0x",tab[i+3]);
			GLCD_DrawString(120,0,distance_q2);
			sprintf(distance_q2,"%0x",tab[i+4]);
			GLCD_DrawString(160,0,distance_q2);
			}
		}
	}
	osDelay(100);
}
/*
void tache2(void const * argument)
{
	
 while(1)
 {

 }
}
*/
osThreadDef(tache1, osPriorityNormal,1,0);
//osThreadDef(tache2, osPriorityNormal,1,0);
/*
 * main: initialize and start the system
 */
int main (void) {
	
  osKernelInitialize ();                    // initialize CMSIS-RTOS

  // initialize peripherals here
//	Init_UART(); // initialisation de l'uart
	GLCD_Initialize();
	GLCD_ClearScreen();
	GLCD_SetFont(&GLCD_Font_16x24);
	lidar_MOTOCLT();
	
  // create 'thread' functions that start executing,
	ID_tache1 = osThreadCreate ( osThread ( tache1 ), NULL ) ;
	//ID_tache2 = osThreadCreate ( osThread ( tache2 ), NULL ) ;
  // example: tid_name = osThreadCreate (osThread(name), NULL);
  osKernelStart ();                         // start thread execution 
	osDelay(osWaitForever) ;
	return 0;
}

void lidar_MOTOCLT(void) // P=25kHz; %haut=60%; sur P2.2
{
	
	LPC_SC->PCONP = LPC_SC->PCONP | (1<<6);
		
	LPC_PINCON->PINSEL4 |= (1<<4); 	//PWM 1.3
	
	LPC_PWM1->CTCR = 0;							//mode timer
	LPC_PWM1->PR = 0;								//Pas de prédivision
	LPC_PWM1->MR0 = 999;						//valeur de N pour 25kHz
	LPC_PWM1->MCR |= (1<<1);				//RAZ du compteur si correspondance avec MR0	
	LPC_PWM1->PCR |= (1<<11);				//active PWM3
	LPC_PWM1->MR3 = 599;						//rapport cyclique de 60%
	LPC_PWM1->TCR =1;								//démarage du timer
}


void Init_UART(void)
{
	Driver_USART1.Initialize(NULL);
	Driver_USART1.PowerControl(ARM_POWER_FULL);
	Driver_USART1.Control(ARM_USART_MODE_ASYNCHRONOUS |
							ARM_USART_DATA_BITS_8		|
							ARM_USART_STOP_BITS_1		|
							ARM_USART_PARITY_NONE		|
							ARM_USART_FLOW_CONTROL_NONE,
							256000);
	Driver_USART1.Control(ARM_USART_CONTROL_TX,1); // validation emission
	Driver_USART1.Control(ARM_USART_CONTROL_RX,1); // validation transmission
}

